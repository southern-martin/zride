name: Feature Branch CI

on:
  pull_request:
    branches: [ develop ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ feature/** ]

env:
  GO_VERSION: 1.21

jobs:
  validate:
    name: Validate Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      working-directory: ./backend
      run: go mod download
      
    - name: Verify dependencies
      working-directory: ./backend
      run: go mod verify
      
    - name: Format check
      working-directory: ./backend
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          echo "Please run 'gofmt -s -w .' to fix formatting"
          exit 1
        fi
        
    - name: Vet code
      working-directory: ./backend
      run: go vet ./...
      
    - name: Run tests
      working-directory: ./backend
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./...
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.out
        flags: backend
        name: backend-coverage
        
  build:
    name: Build Services
    runs-on: ubuntu-latest
    needs: validate
    
    strategy:
      matrix:
        service:
          - auth-service
          - user-service  
          - trip-service
          - payment-service
          - matching-service
          - api-gateway
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Build ${{ matrix.service }}
      working-directory: ./backend
      run: |
        if [ -d "services/${{ matrix.service }}" ]; then
          cd services/${{ matrix.service }}
          go build -v ./...
        elif [ -d "${{ matrix.service }}" ]; then
          cd ${{ matrix.service }}
          go build -v ./...
        else
          echo "Service directory not found for ${{ matrix.service }}"
          exit 1
        fi
        
  frontend-build:
    name: Build Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/zalo-mini-app/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./frontend/zalo-mini-app
      run: npm ci
      
    - name: Lint frontend code
      working-directory: ./frontend/zalo-mini-app
      run: npm run lint
      
    - name: Build frontend
      working-directory: ./frontend/zalo-mini-app
      run: npm run build
      
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./backend/...'
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif
        
  database-migrations:
    name: Test Database Migrations
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: zride_password
          POSTGRES_USER: zride_user
          POSTGRES_DB: zride_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test database schema
      run: |
        PGPASSWORD=zride_password psql -h localhost -U zride_user -d zride_test -f database/migrations/001_initial_schema.sql
        
    - name: Test sample data
      run: |
        PGPASSWORD=zride_password psql -h localhost -U zride_user -d zride_test -f database/seeds/001_sample_data.sql
        
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [build, frontend-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker images
      run: |
        docker-compose -f docker-compose.yml build --no-cache
        
    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml up -d postgres redis
        sleep 30
        docker-compose -f docker-compose.yml ps
        docker-compose -f docker-compose.yml down
        
  notify-status:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [validate, build, frontend-build, security-scan, database-migrations, docker-build]
    if: always()
    
    steps:
    - name: Report Success
      if: ${{ needs.validate.result == 'success' && needs.build.result == 'success' && needs.frontend-build.result == 'success' }}
      run: |
        echo "✅ All checks passed! Ready for code review."
        
    - name: Report Failure
      if: ${{ needs.validate.result == 'failure' || needs.build.result == 'failure' || needs.frontend-build.result == 'failure' }}
      run: |
        echo "❌ Some checks failed. Please review the logs and fix issues."
        exit 1